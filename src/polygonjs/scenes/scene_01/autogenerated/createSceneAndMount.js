import {loadScene_scene_01} from './loadScene.js';

export const createSceneAndMount_scene_01 = async function (options={}) {
	if(options && options.createViewer == null){
		options.createViewer = true;
	}
	options.sceneData = {"properties":{"frame":122,"maxFrame":100,"maxFrameLocked":false,"realtimeState":true,"mainCameraPath":"/perspectiveCamera1","versions":{"polygonjs":"1.2.30"}},"root":{"type":"root","nodes":{"hemisphereLight1":{"type":"hemisphereLight","flags":{"display":true}},"audioListener1":{"type":"audioListener","flags":{"display":true}},"perspectiveCamera1":{"type":"perspectiveCamera","nodes":{"events1":{"type":"eventsNetwork","nodes":{"cameraOrbitControls1":{"type":"cameraOrbitControls","params":{"target":[0.47444770566886707,-0.23202154651215104,0.05438257924136656]}}}}},"params":{"t":[7.350160126507013,7.253789104313057,7.88329319820955],"r":[21.556503127040603,1.0823254777670406,-0.427539427614497],"controls":"./events1/cameraOrbitControls1"},"flags":{"display":true}},"geo2":{"type":"geo","nodes":{"box1":{"type":"box"},"sphere1":{"type":"sphere"},"material1":{"type":"material","params":{"material":"../MAT/meshStandard1"},"inputs":["sphere1"],"flags":{"display":true}},"MAT":{"type":"materialsNetwork","nodes":{"meshStandard1":{"type":"meshStandard","params":{"useEnvMap":1,"envMap":"../../../COP/envMap1","roughness":0.08}}}}},"params":{"t":[-4.060681057227372,0.8183383518574159,-0.9919559957586728]},"flags":{"display":false}},"COP":{"type":"copNetwork","nodes":{"imageEXR1":{"type":"imageEXR"},"envMap1":{"type":"envMap","inputs":["imageEXR1"]}}},"hexa_grid":{"type":"geo","nodes":{"hexagons1":{"type":"hexagons","params":{"size":[10,10],"hexagonRadius":0.5,"pointsOnly":1}},"circle1":{"type":"circle","params":{"radius":"0.58*ch(\"../hexagons1/hexagonRadius\")","segments":6}},"copy1":{"type":"copy","inputs":["transform1","delete2"]},"transform1":{"type":"transform","params":{"r":[0,30,0]},"inputs":["circle1"]},"circle2":{"type":"circle","params":{"radius":3.4,"segments":6,"open":0}},"transform2":{"type":"transform","params":{"t":[0,0.7,0.9]},"inputs":["hexagons1"]},"ray1":{"type":"ray","params":{"useNormals":0,"transferFaceNormals":0,"addDistAttribute":1},"inputs":["transform2","circle2"]},"delete2":{"type":"delete","params":{"byExpression":1,"expression":"@dist<0"},"inputs":["ray1"]},"material1":{"type":"material","params":{"material":"../MAT/lineBasic1"},"inputs":["merge1"]},"merge1":{"type":"merge","params":{"compact":1},"inputs":["copy1"]},"tube1":{"type":"tube","params":{"radiusTop":"0.98*ch(\"../circle1/radius\")","radiusBottom":"ch(\"radiusTop\")","height":0.14,"segmentsRadial":6,"direction":[0,1,0]}},"copy2":{"type":"copy","inputs":["tube1","delete2"],"flags":{"display":true}},"MAT":{"type":"materialsNetwork","nodes":{"meshStandard1":{"type":"meshStandard"},"lineBasic1":{"type":"lineBasic","params":{"color":[0,0,0]}}}}},"flags":{"display":false}},"grid":{"type":"geo","nodes":{"planeHelper1":{"type":"planeHelper","params":{"size":"ch(\"../../cubes/plane1/sizex\")","colorCenterLine":[0,0,0],"colorGrid":[0,0,0]},"flags":{"display":true}}},"flags":{"display":true}},"orthographicCamera1":{"type":"orthographicCamera","nodes":{"eventsNetwork1":{"type":"eventsNetwork","nodes":{"cameraOrbitControls1":{"type":"cameraOrbitControls"}}}},"params":{"t":[5,3.4,5],"controls":"eventsNetwork1/cameraOrbitControls1","near":9.091,"far":27,"size":5},"flags":{"display":true}},"cubes":{"type":"geo","nodes":{"attribCreate1":{"type":"attribCreate","params":{"name":"pti","value1":"@ptnum / (pointsCount(0)-1)"},"inputs":["palette1"]},"attribDelete1":{"type":"attribDelete","params":{"name":"normal"},"inputs":["delete1"]},"attribPromote1":{"type":"attribPromote","params":{"classFrom":1,"classTo":0,"name":"color pti restP"},"inputs":["copy1"]},"attribRename1":{"type":"attribRename","params":{"oldName":"color","newName":"baseColor"},"inputs":["merge1"]},"box1":{"type":"box","params":{"divisions":6,"center":[0,0.5,0]}},"copy1":{"type":"copy","params":{"copyAttributes":true,"attributesToCopy":"h color pti"},"inputs":["transform1","attribCopy1"]},"delete1":{"type":"delete","params":{"byExpression":"true","expression":"@P.x>(0.5*ch(\"../plane1/sizex\")) || @P.z>(0.5*ch(\"../plane1/sizex\"))"},"inputs":["fuse1"]},"fuse1":{"type":"fuse","inputs":["point1"]},"material1":{"type":"material","params":{"material":"../MAT/meshLambertBuilder1"},"inputs":["attribRename1"]},"merge1":{"type":"merge","params":{"compact":true},"inputs":["attribPromote1"],"flags":{"bypass":true}},"palette1":{"type":"palette","params":{"paletteName":"bloomberg","colorsCount":5,"color1":[1,0.3333333333333333,0],"color2":[0.9568627450980393,0.7568627450980392,0.27058823529411763],"color3":[0.0784313725490196,0.2784313725490196,0.0784313725490196],"color4":[0.1843137254901961,0.01568627450980392,0.9882352941176471],"color5":[0.8862745098039215,0.4627450980392157,0.6862745098039216]},"inputs":["sort1"]},"plane1":{"type":"plane","params":{"size":[8,8]}},"point1":{"type":"point","params":{"updateX":true,"x":"0.5+round(@P.x)","updateZ":true,"z":"0.5+round(@P.z)"},"inputs":["scatter1"]},"restAttributes1":{"type":"restAttributes","params":{"tnormal":false},"inputs":["attribCreate1"],"flags":{"bypass":true}},"scatter1":{"type":"scatter","params":{"pointsCount":27},"inputs":["plane1"]},"transform1":{"type":"transform","inputs":["box1"]},"sort1":{"type":"sort","inputs":["attribDelete1"]},"audioNotes1":{"type":"audioNotes","params":{"startOctave":4,"endOctave":6},"inputs":["material1"]},"noise1":{"type":"noise","params":{"amplitude":2.9,"freq":[1.2,1.2,1.2],"offset":[2.9,2.9,3.8],"octaves":4},"inputs":["restAttributes1"]},"attribCreate2":{"type":"attribCreate","params":{"name":"h","value1":"abs(round(@P.y))"},"inputs":["noise1"]},"attribCopy1":{"type":"attribCopy","params":{"name":"h"},"inputs":["restAttributes1","attribCreate2"]},"audioNotes2":{"type":"audioNotes","params":{"name":"note2","endOctave":3},"inputs":["audioNotes1"]},"MAT":{"type":"materialsNetwork","nodes":{"meshLambertBuilder1":{"type":"meshLambertBuilder","nodes":{"attribute1":{"type":"attribute","params":{"name":"baseColor","type":2},"connection_points":{"in":[],"out":[{"name":"val","type":"vec3"}]}},"globals1":{"type":"globals"},"output1":{"type":"output","inputs":[{"index":0,"node":"mix2","output":"mix"},{"index":1,"node":"mix3","output":"mix"},{"index":2,"node":"attribute1","output":"val"}]},"mix2":{"type":"mix","params":{"value0":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}},"value1":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}},"blend":{"type":"float","default_value":0.5,"options":{"spare":true,"editable":false},"raw_input":1}},"inputs":[{"index":0,"node":"globals1","output":"position"},{"index":1,"node":"multAdd3","output":"val"},{"index":2,"node":"easing1","output":"out"}],"connection_points":{"in":[{"name":"value0","type":"vec3"},{"name":"value1","type":"vec3"},{"name":"blend","type":"float"}],"out":[{"name":"mix","type":"vec3"}]}},"mix3":{"type":"mix","params":{"value0":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}},"value1":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}},"blend":{"type":"float","default_value":0.5,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"globals1","output":"normal"},{"index":1,"node":"normalize2","output":"normalized"},{"index":2,"node":"easing1","output":"out"}],"connection_points":{"in":[{"name":"value0","type":"vec3"},{"name":"value1","type":"vec3"},{"name":"blend","type":"float"}],"out":[{"name":"mix","type":"vec3"}]}},"param2":{"type":"param","params":{"name":"blendShape"},"connection_points":{"in":[],"out":[{"name":"val","type":"float"}]}},"attribute2":{"type":"attribute","params":{"name":"pti"},"connection_points":{"in":[],"out":[{"name":"val","type":"float"}]}},"subtract2":{"type":"subtract","params":{"sub0":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"sub1":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"sub2":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"maxInputsCount":3,"inputs":[{"index":0,"node":"param2","output":"val"},{"index":1,"node":"complement1","output":"val"}],"connection_points":{"in":[{"name":"sub0","type":"float"},{"name":"sub1","type":"float"},{"name":"sub2","type":"float"}],"out":[{"name":"subtract","type":"float"}]}},"clamp2":{"type":"clamp","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"min":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"max":{"type":"float","default_value":1,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"subtract2","output":"subtract"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"min","type":"float"},{"name":"max","type":"float"}],"out":[{"name":"val","type":"float"}]}},"complement1":{"type":"complement","params":{"in":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"attribute2","output":"val"}],"connection_points":{"in":[{"name":"in","type":"float"}],"out":[{"name":"val","type":"float"}]}},"easing1":{"type":"easing","params":{"in":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"clamp2","output":"val"}],"connection_points":{"in":[{"name":"in","type":"float"}],"out":[{"name":"out","type":"float"}]}},"normalize2":{"type":"normalize","params":{"in":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"multAdd4","output":"val"}],"connection_points":{"in":[{"name":"in","type":"vec3"}],"out":[{"name":"normalized","type":"vec3"}]}},"multAdd3":{"type":"multAdd","params":{"value":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}},"preAdd":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":true}},"mult":{"type":"vector3","default_value":[1,1,1],"options":{"spare":true,"editable":true},"raw_input":[0.5,0.5,0.5]},"postAdd":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":true},"raw_input":[0,0.5,0]}},"inputs":[{"index":0,"node":"normalize2","output":"normalized"}],"connection_points":{"in":[{"name":"value","type":"vec3"},{"name":"preAdd","type":"vec3"},{"name":"mult","type":"vec3"},{"name":"postAdd","type":"vec3"}],"out":[{"name":"val","type":"vec3"}]}},"multAdd4":{"type":"multAdd","params":{"value":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}},"preAdd":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":true},"raw_input":[0,-0.5,0]},"mult":{"type":"vector3","default_value":[1,1,1],"options":{"spare":true,"editable":true}},"postAdd":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"globals1","output":"position"}],"connection_points":{"in":[{"name":"value","type":"vec3"},{"name":"preAdd","type":"vec3"},{"name":"mult","type":"vec3"},{"name":"postAdd","type":"vec3"}],"out":[{"name":"val","type":"vec3"}]}}},"params":{"blendShape":{"type":"float","default_value":0,"options":{"spare":true,"computeOnDirty":true,"cook":false,"dependentOnFoundNode":true},"raw_input":1,"overriden_options":{"callback":"{}"}}},"persisted_config":{"material":{"metadata":{"version":4.5,"type":"Material","generator":"Material.toJSON"},"uuid":"/cubes/MAT/meshLambertBuilder1-main","type":"MeshLambertMaterial","name":"/cubes/MAT/meshLambertBuilder1","color":16777215,"emissive":0,"reflectivity":1,"refractionRatio":0.98,"depthFunc":3,"depthTest":true,"depthWrite":true,"colorWrite":true,"stencilWrite":false,"stencilWriteMask":255,"stencilFunc":519,"stencilRef":0,"stencilFuncMask":255,"stencilFail":7680,"stencilZFail":7680,"stencilZPass":7680,"fog":false},"onBeforeCompileDataJSONWithoutShaders":{"paramConfigs":[{"type":"float","name":"blendShape","defaultValue":0,"uniformName":"v_POLY_param_blendShape"}],"timeDependent":false,"resolutionDependent":false},"customMaterials":{"customDepthMaterial":{"material":{"metadata":{"version":4.5,"type":"Material","generator":"Material.toJSON"},"uuid":"/cubes/MAT/meshLambertBuilder1-customDepthMaterial","type":"MeshDepthMaterial","name":"customDepthMaterial","depthFunc":3,"depthTest":true,"depthWrite":true,"colorWrite":true,"stencilWrite":false,"stencilWriteMask":255,"stencilFunc":519,"stencilRef":0,"stencilFuncMask":255,"stencilFail":7680,"stencilZFail":7680,"stencilZPass":7680,"depthPacking":3201},"onBeforeCompileDataJSONWithoutShaders":{"paramConfigs":[{"type":"float","name":"blendShape","defaultValue":0,"uniformName":"v_POLY_param_blendShape"}],"timeDependent":false,"resolutionDependent":false}},"customDistanceMaterial":{"material":{"metadata":{"version":4.5,"type":"Material","generator":"Material.toJSON"},"uuid":"/cubes/MAT/meshLambertBuilder1-customDistanceMaterial","type":"MeshDistanceMaterial","name":"customDistanceMaterial","depthFunc":3,"depthTest":true,"depthWrite":true,"colorWrite":true,"stencilWrite":false,"stencilWriteMask":255,"stencilFunc":519,"stencilRef":0,"stencilFuncMask":255,"stencilFail":7680,"stencilZFail":7680,"stencilZPass":7680},"onBeforeCompileDataJSONWithoutShaders":{"paramConfigs":[{"type":"float","name":"blendShape","defaultValue":0,"uniformName":"v_POLY_param_blendShape"}],"timeDependent":false,"resolutionDependent":false}},"customDepthDOFMaterial":{"material":{"metadata":{"version":4.5,"type":"Material","generator":"Material.toJSON"},"uuid":"/cubes/MAT/meshLambertBuilder1-customDepthDOFMaterial","type":"MeshDepthMaterial","name":"customDepthDOFMaterial","depthFunc":3,"depthTest":true,"depthWrite":true,"colorWrite":true,"stencilWrite":false,"stencilWriteMask":255,"stencilFunc":519,"stencilRef":0,"stencilFuncMask":255,"stencilFail":7680,"stencilZFail":7680,"stencilZPass":7680,"depthPacking":3200},"onBeforeCompileDataJSONWithoutShaders":{"paramConfigs":[{"type":"float","name":"blendShape","defaultValue":0,"uniformName":"v_POLY_param_blendShape"}],"timeDependent":false,"resolutionDependent":false}}}}}}},"actor1":{"type":"actor","nodes":{"onTick1":{"type":"onTick"},"onObjectHover1":{"type":"onObjectHover"},"twoWaySwitch1":{"type":"twoWaySwitch","params":{"condition":{"type":"boolean","default_value":false,"options":{"spare":true,"editable":false}},"ifTrue":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":1.2},"ifFalse":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":1}},"inputs":[{"index":0,"node":"onObjectHover1","output":"hovered"}],"connection_points":{"in":[{"name":"condition","type":"boolean","isArray":false},{"name":"ifTrue","type":"float","isArray":false},{"name":"ifFalse","type":"float","isArray":false}],"out":[{"name":"val","type":"float","isArray":false}]}},"setObjectScale1":{"type":"setObjectScale","params":{"scale":{"overriden_options":{}},"mult":{"overriden_options":{}},"lerp":{"raw_input":0.11,"overriden_options":{}},"updateMatrix":{"overriden_options":{}}},"maxInputsCount":6,"inputs":[{"index":0,"node":"onTick1","output":"trigger"},null,{"index":2,"node":"floatToVec3_1","output":"vec3"}]},"floatToVec3_1":{"type":"floatToVec3","params":{"x":{"raw_input":1,"overriden_options":{}},"y":{"overriden_options":{}},"z":{"raw_input":1,"overriden_options":{}}},"inputs":[null,{"index":1,"node":"twoWaySwitch1","output":"val"}]},"playInstrumentNote1":{"type":"playInstrumentNote","params":{"node":"../../../positionalAudio1/OUT","note":{"overriden_options":{}},"duration":{"overriden_options":{}}},"maxInputsCount":4,"inputs":[{"index":0,"node":"triggerTwoWaySwitch1","output":"triggerIfTrue"},null,{"index":2,"node":"switch1","output":"val"}]},"triggerTwoWaySwitch1":{"type":"triggerTwoWaySwitch","params":{"condition":{"overriden_options":{}}},"maxInputsCount":2,"inputs":[{"index":0,"node":"onObjectHover1","output":"trigger"},{"index":1,"node":"onObjectHover1","output":"hovered"}]},"getObjectAttribute1":{"type":"getObjectAttribute","params":{"attribName":"note","type":4},"connection_points":{"in":[{"name":"Object3D","type":"Object3D","isArray":false}],"out":[{"name":"val","type":"string","isArray":false}]}},"constant_posBlend":{"type":"constant","connection_points":{"in":[],"out":[{"name":"val","type":"float","isArray":false}]}},"mix1":{"type":"mix","params":{"value0":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"value1":{"type":"float","default_value":1,"options":{"spare":true,"editable":false}},"blend":{"type":"float","default_value":0.5,"options":{"spare":true,"editable":false}}},"inputs":[null,{"index":1,"node":"getObjectAttribute2","output":"val"},{"index":2,"node":"clamp1","output":"val"}],"connection_points":{"in":[{"name":"value0","type":"float","isArray":false},{"name":"value1","type":"float","isArray":false},{"name":"blend","type":"float","isArray":false}],"out":[{"name":"val","type":"float","isArray":false}]}},"getObjectAttribute2":{"type":"getObjectAttribute","params":{"attribName":"h"},"connection_points":{"in":[{"name":"Object3D","type":"Object3D","isArray":false}],"out":[{"name":"val","type":"float","isArray":false}]}},"setObjectPosition1":{"type":"setObjectPosition","params":{"position":{"overriden_options":{}},"lerp":{"overriden_options":{}},"updateMatrix":{"overriden_options":{}}},"maxInputsCount":5,"inputs":[{"index":0,"node":"setObjectScale1","output":"trigger"},null,{"index":2,"node":"floatToVec3_2","output":"vec3"}]},"floatToVec3_2":{"type":"floatToVec3","params":{"x":{"overriden_options":{}},"y":{"overriden_options":{}},"z":{"overriden_options":{}}},"inputs":[{"index":0,"node":"vec3ToFloat1","output":"x"},{"index":1,"node":"mix1","output":"val"},{"index":2,"node":"vec3ToFloat1","output":"z"}]},"getObjectProperty1":{"type":"getObjectProperty"},"vec3ToFloat1":{"type":"vec3ToFloat","params":{"vec3":{"overriden_options":{}}},"inputs":[{"index":0,"node":"getObjectProperty1","output":"position"}]},"getObjectAttribute3":{"type":"getObjectAttribute","params":{"attribName":"pti"},"connection_points":{"in":[{"name":"Object3D","type":"Object3D","isArray":false}],"out":[{"name":"val","type":"float","isArray":false}]}},"subtract1":{"type":"subtract","params":{"sub0":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"sub1":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"constant_posBlend","output":"val"},{"index":1,"node":"getObjectAttribute3","output":"val"}],"connection_points":{"in":[{"name":"sub0","type":"float","isArray":false},{"name":"sub1","type":"float","isArray":false}],"out":[{"name":"subtract","type":"float","isArray":false}]}},"clamp1":{"type":"clamp","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"min":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"max":{"type":"float","default_value":1,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"subtract1","output":"subtract"}],"connection_points":{"in":[{"name":"value","type":"float","isArray":false},{"name":"min","type":"float","isArray":false},{"name":"max","type":"float","isArray":false}],"out":[{"name":"val","type":"float","isArray":false}]}},"getObjectAttribute4":{"type":"getObjectAttribute","params":{"attribName":"note2","type":4},"connection_points":{"in":[{"name":"Object3D","type":"Object3D","isArray":false}],"out":[{"name":"val","type":"string","isArray":false}]}},"switch1":{"type":"switch","params":{"index":{"type":"integer","default_value":0,"options":{"spare":true,"editable":true},"raw_input":"ch(\"../constant_posBlend/float\") >= 1"},"in0":{"type":"string","default_value":"0","options":{"spare":true,"editable":false}},"in1":{"type":"string","default_value":"0","options":{"spare":true,"editable":false}},"in2":{"type":"string","default_value":"","options":{"spare":true,"editable":true}}},"maxInputsCount":4,"inputs":[null,{"index":1,"node":"getObjectAttribute1","output":"val"},{"index":2,"node":"getObjectAttribute4","output":"val"}],"connection_points":{"in":[{"name":"index","type":"integer","isArray":false},{"name":"in0","type":"string","isArray":false},{"name":"in1","type":"string","isArray":false},{"name":"in2","type":"string","isArray":false}],"out":[{"name":"val","type":"string","isArray":false}]}}},"inputs":["audioNotes2"],"flags":{"display":true}}},"flags":{"display":true}},"positionalAudio1":{"type":"positionalAudio","nodes":{"envelope1":{"type":"envelope"},"AMSynth1":{"type":"AMSynth","inputs":["envelope1"]},"playInstrument1":{"type":"playInstrument","params":{"startOctave":1,"endOctave":3},"inputs":["switch_filterSound"]},"OUT":{"type":"null","inputs":["playInstrument1"]},"sampler1":{"type":"sampler","params":{"baseUrl":"https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/audio/resources/tonejs.github.io/samples"},"inputs":["envelope2"]},"envelope2":{"type":"envelope"},"reverb1":{"type":"reverb","inputs":["sampler1"]},"distortion1":{"type":"distortion","inputs":["sampler1"]},"phaser1":{"type":"phaser","inputs":["reverb1"],"flags":{"bypass":true}},"switch_filterSound":{"type":"switch","inputs":["sampler1","phaser1"]}},"params":{"audioNode":"OUT","showHelper":0},"flags":{"display":true}}},"params":{"bgColor":[0.23137254901960785,0.7490196078431373,0.5764705882352941],"mainCameraPath":"/perspectiveCamera1"}},"shaders":{"/cubes/MAT/meshLambertBuilder1":{"vertex":"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n\n\n\n// /cubes/MAT/meshLambertBuilder1/complement1\nfloat complement(float x){return 1.0-x;}\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\n\n\n// /cubes/MAT/meshLambertBuilder1/easing1\n\nfloat sineInOut(float t) {\n  return -0.5 * (cos(PI * t) - 1.0);\n}\n\n\n\n\n\n\n\n\n\n// /cubes/MAT/meshLambertBuilder1/param2\nuniform float v_POLY_param_blendShape;\n\n// /cubes/MAT/meshLambertBuilder1/globals1\nvarying vec3 v_POLY_globals1_position;\nvarying vec3 v_POLY_globals1_normal;\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nvarying vec3 v_POLY_attribute_baseColor;\n\n// /cubes/MAT/meshLambertBuilder1/attribute2\nattribute float pti;\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nattribute vec3 baseColor;\n\n\n\n\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\n\n\t// /cubes/MAT/meshLambertBuilder1/globals1\n\tv_POLY_globals1_position = vec3(position);\n\tv_POLY_globals1_normal = vec3(normal);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/param2\n\tfloat v_POLY_param2_val = v_POLY_param_blendShape;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/attribute2\n\tfloat v_POLY_attribute2_val = pti;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/attribute1\n\tv_POLY_attribute_baseColor = vec3(baseColor);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/multAdd4\n\tvec3 v_POLY_multAdd4_val = (vec3(1.0, 1.0, 1.0)*(v_POLY_globals1_position + vec3(0.0, -0.5, 0.0))) + vec3(0.0, 0.0, 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/complement1\n\tfloat v_POLY_complement1_val = complement(v_POLY_attribute2_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_multAdd4_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/subtract2\n\tfloat v_POLY_subtract2_subtract = (v_POLY_param2_val - v_POLY_complement1_val - 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/multAdd3\n\tvec3 v_POLY_multAdd3_val = (vec3(0.5, 0.5, 0.5)*(v_POLY_normalize2_normalized + vec3(0.0, 0.0, 0.0))) + vec3(0.0, 0.5, 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_subtract2_subtract, 0.0, 1.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/easing1\n\tfloat v_POLY_easing1_out = sineInOut(v_POLY_clamp2_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/mix2\n\tvec3 v_POLY_mix2_mix = mix(v_POLY_globals1_position, v_POLY_multAdd3_val, v_POLY_easing1_out);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/mix3\n\tvec3 v_POLY_mix3_mix = mix(v_POLY_globals1_normal, v_POLY_normalize2_normalized, v_POLY_easing1_out);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/output1\n\tvec3 transformed = v_POLY_mix2_mix;\n\tvec3 objectNormal = v_POLY_mix3_mix;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\n\n\n\t#include <morphcolor_vertex>\n// removed:\n//\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n// removed:\n//\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}","fragment":"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n\n\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nvarying vec3 v_POLY_attribute_baseColor;\n\n\n\n\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\n\n\t// /cubes/MAT/meshLambertBuilder1/attribute1\n\tvec3 v_POLY_attribute1_val = v_POLY_attribute_baseColor;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/output1\n\tdiffuseColor.xyz = v_POLY_attribute1_val;\n\n\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}","customDepthMaterial.vertex":"#include <common>\n\n\n\n// /cubes/MAT/meshLambertBuilder1/complement1\nfloat complement(float x){return 1.0-x;}\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\n\n\n// /cubes/MAT/meshLambertBuilder1/easing1\n\nfloat sineInOut(float t) {\n  return -0.5 * (cos(PI * t) - 1.0);\n}\n\n\n\n\n\n\n\n\n\n// /cubes/MAT/meshLambertBuilder1/param2\nuniform float v_POLY_param_blendShape;\n\n// /cubes/MAT/meshLambertBuilder1/globals1\nvarying vec3 v_POLY_globals1_position;\nvarying vec3 v_POLY_globals1_normal;\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nvarying vec3 v_POLY_attribute_baseColor;\n\n// /cubes/MAT/meshLambertBuilder1/attribute2\nattribute float pti;\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nattribute vec3 baseColor;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /cubes/MAT/meshLambertBuilder1/globals1\n\tv_POLY_globals1_position = vec3(position);\n\tv_POLY_globals1_normal = vec3(normal);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/param2\n\tfloat v_POLY_param2_val = v_POLY_param_blendShape;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/attribute2\n\tfloat v_POLY_attribute2_val = pti;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/attribute1\n\tv_POLY_attribute_baseColor = vec3(baseColor);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/multAdd4\n\tvec3 v_POLY_multAdd4_val = (vec3(1.0, 1.0, 1.0)*(v_POLY_globals1_position + vec3(0.0, -0.5, 0.0))) + vec3(0.0, 0.0, 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/complement1\n\tfloat v_POLY_complement1_val = complement(v_POLY_attribute2_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_multAdd4_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/subtract2\n\tfloat v_POLY_subtract2_subtract = (v_POLY_param2_val - v_POLY_complement1_val - 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/multAdd3\n\tvec3 v_POLY_multAdd3_val = (vec3(0.5, 0.5, 0.5)*(v_POLY_normalize2_normalized + vec3(0.0, 0.0, 0.0))) + vec3(0.0, 0.5, 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_subtract2_subtract, 0.0, 1.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/easing1\n\tfloat v_POLY_easing1_out = sineInOut(v_POLY_clamp2_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/mix2\n\tvec3 v_POLY_mix2_mix = mix(v_POLY_globals1_position, v_POLY_multAdd3_val, v_POLY_easing1_out);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/mix3\n\tvec3 v_POLY_mix3_mix = mix(v_POLY_globals1_normal, v_POLY_normalize2_normalized, v_POLY_easing1_out);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/output1\n\tvec3 transformed = v_POLY_mix2_mix;\n\tvec3 objectNormal = v_POLY_mix3_mix;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}","customDepthMaterial.fragment":"\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n\n\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nvarying vec3 v_POLY_attribute_baseColor;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\n\n\t// /cubes/MAT/meshLambertBuilder1/attribute1\n\tvec3 v_POLY_attribute1_val = v_POLY_attribute_baseColor;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/output1\n\tdiffuseColor.xyz = v_POLY_attribute1_val;\n\n\n\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n","customDistanceMaterial.vertex":"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n\n\n\n// /cubes/MAT/meshLambertBuilder1/complement1\nfloat complement(float x){return 1.0-x;}\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\n\n\n// /cubes/MAT/meshLambertBuilder1/easing1\n\nfloat sineInOut(float t) {\n  return -0.5 * (cos(PI * t) - 1.0);\n}\n\n\n\n\n\n\n\n\n\n// /cubes/MAT/meshLambertBuilder1/param2\nuniform float v_POLY_param_blendShape;\n\n// /cubes/MAT/meshLambertBuilder1/globals1\nvarying vec3 v_POLY_globals1_position;\nvarying vec3 v_POLY_globals1_normal;\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nvarying vec3 v_POLY_attribute_baseColor;\n\n// /cubes/MAT/meshLambertBuilder1/attribute2\nattribute float pti;\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nattribute vec3 baseColor;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /cubes/MAT/meshLambertBuilder1/globals1\n\tv_POLY_globals1_position = vec3(position);\n\tv_POLY_globals1_normal = vec3(normal);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/param2\n\tfloat v_POLY_param2_val = v_POLY_param_blendShape;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/attribute2\n\tfloat v_POLY_attribute2_val = pti;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/attribute1\n\tv_POLY_attribute_baseColor = vec3(baseColor);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/multAdd4\n\tvec3 v_POLY_multAdd4_val = (vec3(1.0, 1.0, 1.0)*(v_POLY_globals1_position + vec3(0.0, -0.5, 0.0))) + vec3(0.0, 0.0, 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/complement1\n\tfloat v_POLY_complement1_val = complement(v_POLY_attribute2_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_multAdd4_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/subtract2\n\tfloat v_POLY_subtract2_subtract = (v_POLY_param2_val - v_POLY_complement1_val - 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/multAdd3\n\tvec3 v_POLY_multAdd3_val = (vec3(0.5, 0.5, 0.5)*(v_POLY_normalize2_normalized + vec3(0.0, 0.0, 0.0))) + vec3(0.0, 0.5, 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_subtract2_subtract, 0.0, 1.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/easing1\n\tfloat v_POLY_easing1_out = sineInOut(v_POLY_clamp2_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/mix2\n\tvec3 v_POLY_mix2_mix = mix(v_POLY_globals1_position, v_POLY_multAdd3_val, v_POLY_easing1_out);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/mix3\n\tvec3 v_POLY_mix3_mix = mix(v_POLY_globals1_normal, v_POLY_normalize2_normalized, v_POLY_easing1_out);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/output1\n\tvec3 transformed = v_POLY_mix2_mix;\n\tvec3 objectNormal = v_POLY_mix3_mix;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}","customDistanceMaterial.fragment":"\n// INSERT DEFINES\n\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n\n\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nvarying vec3 v_POLY_attribute_baseColor;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\n\n\t// /cubes/MAT/meshLambertBuilder1/attribute1\n\tvec3 v_POLY_attribute1_val = v_POLY_attribute_baseColor;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/output1\n\tdiffuseColor.xyz = v_POLY_attribute1_val;\n\n\n\n\n\t// INSERT BODY\n\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n","customDepthDOFMaterial.vertex":"#include <common>\n\n\n\n// /cubes/MAT/meshLambertBuilder1/complement1\nfloat complement(float x){return 1.0-x;}\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\n\n\n// /cubes/MAT/meshLambertBuilder1/easing1\n\nfloat sineInOut(float t) {\n  return -0.5 * (cos(PI * t) - 1.0);\n}\n\n\n\n\n\n\n\n\n\n// /cubes/MAT/meshLambertBuilder1/param2\nuniform float v_POLY_param_blendShape;\n\n// /cubes/MAT/meshLambertBuilder1/globals1\nvarying vec3 v_POLY_globals1_position;\nvarying vec3 v_POLY_globals1_normal;\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nvarying vec3 v_POLY_attribute_baseColor;\n\n// /cubes/MAT/meshLambertBuilder1/attribute2\nattribute float pti;\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nattribute vec3 baseColor;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /cubes/MAT/meshLambertBuilder1/globals1\n\tv_POLY_globals1_position = vec3(position);\n\tv_POLY_globals1_normal = vec3(normal);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/param2\n\tfloat v_POLY_param2_val = v_POLY_param_blendShape;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/attribute2\n\tfloat v_POLY_attribute2_val = pti;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/attribute1\n\tv_POLY_attribute_baseColor = vec3(baseColor);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/multAdd4\n\tvec3 v_POLY_multAdd4_val = (vec3(1.0, 1.0, 1.0)*(v_POLY_globals1_position + vec3(0.0, -0.5, 0.0))) + vec3(0.0, 0.0, 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/complement1\n\tfloat v_POLY_complement1_val = complement(v_POLY_attribute2_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_multAdd4_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/subtract2\n\tfloat v_POLY_subtract2_subtract = (v_POLY_param2_val - v_POLY_complement1_val - 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/multAdd3\n\tvec3 v_POLY_multAdd3_val = (vec3(0.5, 0.5, 0.5)*(v_POLY_normalize2_normalized + vec3(0.0, 0.0, 0.0))) + vec3(0.0, 0.5, 0.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_subtract2_subtract, 0.0, 1.0);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/easing1\n\tfloat v_POLY_easing1_out = sineInOut(v_POLY_clamp2_val);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/mix2\n\tvec3 v_POLY_mix2_mix = mix(v_POLY_globals1_position, v_POLY_multAdd3_val, v_POLY_easing1_out);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/mix3\n\tvec3 v_POLY_mix3_mix = mix(v_POLY_globals1_normal, v_POLY_normalize2_normalized, v_POLY_easing1_out);\n\t\n\t// /cubes/MAT/meshLambertBuilder1/output1\n\tvec3 transformed = v_POLY_mix2_mix;\n\tvec3 objectNormal = v_POLY_mix3_mix;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}","customDepthDOFMaterial.fragment":"\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n\n\n\n// /cubes/MAT/meshLambertBuilder1/attribute1\nvarying vec3 v_POLY_attribute_baseColor;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\n\n\t// /cubes/MAT/meshLambertBuilder1/attribute1\n\tvec3 v_POLY_attribute1_val = v_POLY_attribute_baseColor;\n\t\n\t// /cubes/MAT/meshLambertBuilder1/output1\n\tdiffuseColor.xyz = v_POLY_attribute1_val;\n\n\n\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n"}}};
	return loadScene_scene_01(options);
};
